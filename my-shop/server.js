require('dotenv').config();
const express = require('express');
const path = require('path');
const axios = require('axios');
const xml2js = require('xml2js');
const cron = require('node-cron');
const fs = require('fs').promises;
const { existsSync } = require('fs');

const app = express();
const PORT = process.env.PORT || 3000;
const XML_URL = process.env.XML_URL;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ URL
if (!XML_URL || !XML_URL.startsWith('http')) {
  console.error('–ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π URL –¥–ª—è XML. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ .env —Ñ–∞–π–ª');
  process.exit(1);
}

// Middleware
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());

// –ö–µ—à –¥–∞–Ω–∏—Ö
let cachedProducts = [];
let cachedCategories = [];
let lastUpdate = null;

// –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö XML
function processData(result) {
  try {
    const categoriesMap = {};
    result.yml_catalog.shop[0].categories[0].category.forEach(cat => {
      categoriesMap[cat.$.id] = cat._;
    });

    cachedProducts = result.yml_catalog.shop[0].offers[0].offer.map(item => ({
      id: item.$.id,
      name: item.name[0],
      price: parseFloat(item.price[0]).toFixed(2),
      image: item.picture?.[0] || '/images/no-image.jpg',
      category: categoriesMap[item.categoryId[0]] || '–Ü–Ω—à–µ',
      description: item.description?.[0] || '',
      available: item.$.available === 'true'
    }));

    cachedCategories = [...new Set(cachedProducts.map(p => p.category))];
    lastUpdate = Date.now();

    saveBackup();
    console.log(`–û–Ω–æ–≤–ª–µ–Ω–æ: ${cachedProducts.length} —Ç–æ–≤–∞—Ä—ñ–≤, ${cachedCategories.length} –∫–∞—Ç–µ–≥–æ—Ä—ñ–π`);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö:', error);
    throw error;
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—É
async function saveBackup() {
  const backupData = {
    products: cachedProducts,
    categories: cachedCategories,
    timestamp: lastUpdate
  };
  
  await fs.writeFile(
    path.join(__dirname, 'data', 'last-products.json'),
    JSON.stringify(backupData, null, 2),
    'utf-8'
  );
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
async function loadProducts() {
  try {
    console.log(`–°–ø—Ä–æ–±—É—é –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ XML –∑ ${XML_URL}...`);
    const response = await axios.get(XML_URL, {
      timeout: 10000,
      headers: { 'User-Agent': 'MyShop/1.0' }
    });
    const result = await xml2js.parseStringPromise(response.data);
    processData(result);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML:', error.message);
    await loadLocalBackup();
  }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤—É
async function loadLocalBackup() {
  try {
    const backupPath = path.join(__dirname, 'data', 'last-products.json');
    
    if (!existsSync(backupPath)) {
      console.log('–†–µ–∑–µ—Ä–≤–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—é –ª–æ–∫–∞–ª—å–Ω–∏–π XML...');
      await loadLocalXML();
      return;
    }

    const data = await fs.readFile(backupPath, 'utf-8');
    const backup = JSON.parse(data);
    
    cachedProducts = backup.products || [];
    cachedCategories = backup.categories || [];
    lastUpdate = backup.timestamp || Date.now();
    
    console.log(`–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –¥–∞–Ω—ñ (${cachedProducts.length} —Ç–æ–≤–∞—Ä—ñ–≤)`);
  } catch (e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤—É:', e.message);
    await loadLocalXML();
  }
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ XML
async function loadLocalXML() {
  try {
    const xmlPath = path.join(__dirname, 'data', 'products.xml');
    if (!existsSync(xmlPath)) {
      throw new Error('–õ–æ–∫–∞–ª—å–Ω–∏–π XML —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    const data = await fs.readFile(xmlPath, 'utf-8');
    const result = await xml2js.parseStringPromise(data);
    processData(result);
    console.log('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–∏–π XML —Ñ–∞–π–ª');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ XML:', error.message);
    await createEmptyBackup();
  }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É
async function createEmptyBackup() {
  cachedProducts = [];
  cachedCategories = [];
  lastUpdate = Date.now();

  await saveBackup();
  console.log('–°—Ç–≤–æ—Ä–µ–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Ñ–∞–π–ª');
}

// API
app.get('/api/products', async (req, res) => {
  try {
    res.json({
      success: true,
      products: cachedProducts.filter(p => p.available),
      lastUpdate: new Date(lastUpdate).toISOString(),
      count: cachedProducts.length
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

app.get('/api/categories', async (req, res) => {
  res.json({
    success: true,
    categories: cachedCategories
  });
});

// –°—Ç–æ—Ä—ñ–Ω–∫–∏
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/cart', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'cart.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  await loadProducts();
  
  // –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω—å (–∫–æ–∂–Ω—ñ 30 —Ö–≤)
  cron.schedule('*/30 * * * *', () => {
    console.log('\n--- –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ---');
    loadProducts();
  });

  app.listen(PORT, () => {
    console.log(`
      üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: http://localhost:${PORT}
      ‚è± –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${new Date(lastUpdate).toLocaleString()}
      üì¶ –¢–æ–≤–∞—Ä—ñ–≤: ${cachedProducts.length}
      üóÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ–π: ${cachedCategories.length}
    `);
  });
}

startServer().catch(error => {
  console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
  process.exit(1);
});